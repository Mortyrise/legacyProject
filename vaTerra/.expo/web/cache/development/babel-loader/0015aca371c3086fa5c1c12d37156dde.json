{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport AccessibilityInfo from \"react-native-web/dist/exports/AccessibilityInfo\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { vh, vw } from 'react-native-css-vh-vw';\nimport { SliderPickerCursor } from \"./SliderPickerCursor\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var SliderPicker = function (_Component) {\n  _inherits(SliderPicker, _Component);\n\n  var _super = _createSuper(SliderPicker);\n\n  function SliderPicker(props) {\n    var _this;\n\n    _classCallCheck(this, SliderPicker);\n\n    _this = _super.call(this, props);\n\n    _this.componentDidMount = function _callee() {\n      var screenReaderEnabled;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(AccessibilityInfo.isScreenReaderEnabled());\n\n            case 2:\n              screenReaderEnabled = _context.sent;\n\n              _this.setState({\n                screenReaderEnabled: screenReaderEnabled\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.handleNumericInputChange = function (val) {\n      var callbackExecuted = false;\n\n      _this.setState({\n        numericInputValue: val\n      }, function () {\n        if (Number(_this.state.numericInputValue) > _this.maxValue) {\n          _this.setState({\n            numericInputValue: String(_this.maxValue)\n          }, function () {\n            _this.callback(_this.state.numericInputValue);\n\n            callbackExecuted = true;\n          });\n        } else if (Number(_this.state.numericInputValue) < _this.minValue) {\n          _this.setState({\n            numericInputValue: String(_this.minValue)\n          }, function () {\n            _this.callback(_this.state.numericInputValue);\n\n            callbackExecuted = true;\n          });\n        }\n\n        if (!callbackExecuted) {\n          _this.callback(_this.state.numericInputValue);\n        }\n      });\n    };\n\n    _this.styleChecker = function (styleObject, key, value) {\n      if (!Object.keys(styleObject).includes(key)) {\n        styleObject[key] = value;\n      }\n    };\n\n    _this.setPreRenderStyles = function () {\n      _this.setLabelAndLabelContainerStyles();\n\n      _this.filterSliderInnerBorderStyles();\n    };\n\n    _this.setLabelAndLabelContainerStyles = function () {\n      if (_this.handleLabelCheck()) {\n        _this.labelsContainerStyles['paddingBottom'] = vh(5);\n      }\n\n      _this.labelsContainerStyles['width'] = vw(_this.widthPercentage + 1);\n      _this.labelStyles['color'] = _this.labelFontColor;\n      _this.labelStyles['fontSize'] = _this.labelFontSize;\n      _this.labelStyles['fontWeight'] = _this.labelFontWeight;\n    };\n\n    _this.filterSliderInnerBorderStyles = function () {\n      var keys = Object.keys(_this.sliderInnerBorderStyles);\n\n      for (var i = 0; i < keys.length; i++) {\n        if (!keys[i].includes('border')) {\n          delete _this.sliderInnerBorderStyles[keys[i]];\n        }\n      }\n    };\n\n    _this.defaultValueCheckHandler = function (value) {\n      if (isNaN(value) || value > _this.maxValue || value < 0) {\n        return false;\n      }\n\n      return true;\n    };\n\n    _this.handleSeparatorStyle = function (index) {\n      if (index === 0 || index === _this.maxValue || index === _this.state.currentValue) {\n        return {\n          borderLeftColor: 'transparent'\n        };\n      }\n\n      var separatorStyles = _this.separatorStylesOverride ? _extends({}, _this.separatorStylesOverride) : _extends({}, styles.separatorLine);\n\n      _this.styleChecker(separatorStyles, 'height', vh(_this.heightPercentage) * 3);\n\n      return separatorStyles;\n    };\n\n    _this.handleLabelCheck = function () {\n      if (_this.minLabel === _this.emptyLabel && _this.midLabel === _this.emptyLabel && _this.maxLabel === _this.emptyLabel) {\n        return true;\n      }\n\n      return false;\n    };\n\n    _this.handleSelectionFillWidth = function () {\n      return vw(_this.widthPercentage) * (_this.state.currentValue / _this.maxValue) - vh(1) * .5;\n    };\n\n    _this.handleWrapperPress = function (locationX) {\n      _this.setState({\n        nonDraggablePressLocation: locationX,\n        triggerNonDraggablePress: true\n      });\n    };\n\n    _this.handleChildRelease = function (value) {\n      _this.setState({\n        currentValue: value,\n        triggerNonDraggablePress: false\n      }, function () {\n        return _this.callback(value);\n      });\n    };\n\n    _this.labelGenerator = function (text, align) {\n      return _jsx(Text, {\n        style: [_this.labelStyles, {\n          textAlign: align\n        }],\n        children: text\n      });\n    };\n\n    _this.separatorGenerator = function (index) {\n      return _jsx(View, {\n        style: _this.handleSeparatorStyle(index),\n        children: _jsx(Text, {\n          style: {\n            color: 'transparent'\n          },\n          children: \"|\"\n        })\n      }, index);\n    };\n\n    _this.generateSeparators = function () {\n      if (!_this.showSeparatorScale) {\n        return null;\n      }\n\n      var separators = [];\n\n      for (var i = 0; i <= _this.maxValue; i++) {\n        separators.push(_this.separatorGenerator(i));\n      }\n\n      var separatorContainerStyles = _extends({}, styles.separatorContainer);\n\n      separatorContainerStyles['width'] = vw(_this.widthPercentage);\n      separatorContainerStyles['bottom'] = vh(_this.heightPercentage) * 2;\n      return _jsx(View, {\n        style: separatorContainerStyles,\n        children: separators\n      });\n    };\n\n    _this.generateNumbers = function () {\n      if (!_this.showNumberScale) {\n        return null;\n      }\n\n      var numberStyle = _this.numberStylesOverride ? _extends({}, _this.numberStylesOverride) : _extends({}, styles.buttonNumber);\n\n      _this.styleChecker(numberStyle, 'color', _this.scaleNumberFontColor);\n\n      _this.styleChecker(numberStyle, 'fontSize', _this.scaleNumberFontSize);\n\n      _this.styleChecker(numberStyle, 'fontWeight', _this.scaleNumberFontWeight);\n\n      var numbers = [];\n\n      for (var i = 0; i <= _this.maxValue; i++) {\n        var width = Math.floor(vw(_this.widthPercentage) / _this.maxValue);\n        width = i === 0 ? width + vw(1) / 3 * 2 : width;\n        numbers.push(_jsx(TouchableHighlight, {\n          style: [styles.buttonTouchable, {\n            width: width\n          }],\n          children: _jsx(Text, {\n            style: numberStyle,\n            children: i\n          })\n        }, i));\n      }\n\n      var numberContainerStyles = _extends({}, styles.numberContainer);\n\n      numberContainerStyles['width'] = vw(_this.widthPercentage);\n\n      if (!_this.showSeparatorScale) {\n        numberContainerStyles['marginTop'] = _this.scaleNumberFontSize * .75;\n      }\n\n      return _jsx(View, {\n        style: numberContainerStyles,\n        children: numbers\n      });\n    };\n\n    _this.emptyLabel = _jsx(View, {\n      style: {\n        flex: 1\n      }\n    });\n    _this.defaultSliderInnerBorderStyles = {\n      borderWidth: vw(1) / 2,\n      borderColor: '#d9dce4',\n      borderBottomColor: '#f1f4f5',\n      borderRadius: 50\n    };\n    _this.defaultNumericInputContainerStyles = _objectSpread({\n      width: vw(25),\n      flexDirection: 'row',\n      backgroundColor: '#f1f4f5',\n      borderBottomColor: \"#889cb2\",\n      borderBottomWidth: vh(1) / 3,\n      marginHorizontal: vw(5),\n      marginVertical: vh(2),\n      padding: vw(4),\n      borderTopLeftRadius: 10,\n      borderTopRightRadius: 10\n    }, Platform.isPad ? {\n      marginTop: vh(4)\n    } : null);\n    _this.defaultNumericInputTextInputStyles = _objectSpread({\n      flex: 1,\n      fontSize: Math.ceil(vw(3) * 1.3)\n    }, Platform.select({\n      ios: {\n        marginTop: vw(2)\n      },\n      android: {\n        paddingBottom: 0,\n        paddingTop: 5\n      }\n    }));\n    _this.buttonStylesOverride = _this.props.buttonStylesOverride ? _this.props.buttonStylesOverride : null;\n    _this.labelStylesOverride = _this.props.labelStylesOverride ? _this.props.labelStylesOverride : null;\n    _this.numberStylesOverride = _this.props.numberStylesOverride ? _this.props.numberStylesOverride : null;\n    _this.selectionFillStylesOverride = _this.props.selectionFillStylesOverride ? _this.props.selectionFillStylesOverride : null;\n    _this.separatorStylesOverride = _this.props.separatorStylesOverride ? _this.props.separatorStylesOverride : null;\n    _this.sliderInnerStylesOverride = _this.props.sliderInnerStylesOverride ? _this.props.sliderInnerStylesOverride : null;\n    _this.labelsContainerStyles = _extends({}, styles.labelsContainer);\n    _this.labelStyles = _this.labelStylesOverride ? _extends({}, _this.labelStylesOverride) : _extends({}, styles.label);\n    _this.callback = _this.props.callback ? _this.props.callback : function () {};\n    _this.defaultValue = _this.defaultValueCheckHandler(_this.props.defaultValue) ? _this.props.defaultValue : 5;\n    _this.maxValue = _this.props.maxValue ? _this.props.maxValue : 10;\n    _this.slideBeginCallback = _this.props.slideBeginCallback ? _this.props.slideBeginCallback : function () {};\n    _this.errorToleranceMargin = _this.props.errorToleranceMargin ? _this.props.errorToleranceMargin : 50;\n\n    if (isNaN(_this.errorToleranceMargin) || _this.errorToleranceMargin < 0) {\n      _this.errorToleranceMargin = null;\n    }\n\n    _this.fillColor = _this.props.fillColor ? _this.props.fillColor : 'dodgerblue';\n    _this.heightPercentage = _this.props.heightPercentage ? _this.props.heightPercentage : 1;\n    _this.maxLabel = _this.props.maxLabel ? _this.labelGenerator(_this.props.maxLabel, 'right') : _this.emptyLabel;\n    _this.midLabel = _this.props.midLabel ? _this.labelGenerator(_this.props.midLabel, 'center') : _this.emptyLabel;\n    _this.minLabel = _this.props.minLabel ? _this.labelGenerator(_this.props.minLabel, 'left') : _this.emptyLabel;\n    _this.showFill = _this.props.showFill === false ? false : true;\n    _this.showNumberScale = _this.props.showNumberScale ? _this.props.showNumberScale : false;\n    _this.showSeparatorScale = _this.props.showSeparatorScale ? _this.props.showSeparatorScale : false;\n    _this.widthPercentage = _this.props.widthPercentage ? _this.props.widthPercentage : 85;\n    _this.buttonBackgroundColor = _this.props.buttonBackgroundColor ? _this.props.buttonBackgroundColor : 'white';\n    _this.buttonBorderColor = _this.props.buttonBorderColor ? _this.props.buttonBorderColor : 'dimgrey';\n    _this.buttonBorderWidth = _this.props.buttonBorderWidth ? _this.props.buttonBorderWidth : 1;\n    _this.buttonDimensionsPercentage = _this.props.buttonDimensionsPercentage ? _this.props.buttonDimensionsPercentage : 6;\n    _this.labelFontColor = _this.props.labelFontColor ? _this.props.labelFontColor : 'dimgrey';\n    _this.labelFontSize = _this.props.labelFontSize ? _this.props.labelFontSize : 28;\n    _this.labelFontWeight = _this.props.labelFontWeight ? _this.props.labelFontWeight : 'normal';\n    _this.scaleNumberFontColor = _this.props.scaleNumberFontColor ? _this.props.scaleNumberFontColor : 'dimgrey';\n    _this.scaleNumberFontSize = _this.props.scaleNumberFontSize ? _this.props.scaleNumberFontSize : 24;\n    _this.scaleNumberFontWeight = _this.props.scaleNumberFontWeight ? _this.props.scaleNumberFontWeight : 'normal';\n    _this.sliderInnerBackgroundColor = _this.props.sliderInnerBackgroundColor ? _this.props.sliderInnerBackgroundColor : 'white';\n    _this.sliderInnerBorderStyles = _this.props.sliderInnerBorderStyles ? _this.props.sliderInnerBorderStyles : _this.defaultSliderInnerBorderStyles;\n\n    if (_this.maxValue > 10 || _this.widthPercentage <= 50) {\n      _this.showNumberScale = false;\n      _this.showSeparatorScale = false;\n    }\n\n    if (_this.defaultValue > _this.maxValue) {\n      _this.defaultValue = _this.maxValue;\n    }\n\n    _this.accessibilityLabel = _this.props.accessibilityLabel ? String(_this.props.accessibilityLabel) : '';\n    _this.accessibilityHint = _this.props.accessibilityHint ? String(_this.props.accessibilityHint) : '';\n    _this.convertToNumericInputOnScreenReader = _this.props.convertToNumericInputOnScreenReader === false ? false : true;\n    _this.numericInputContainerStyles = _this.props.numericInputContainerStyles ? _this.props.numericInputContainerStyles : _this.defaultNumericInputContainerStyles;\n    _this.numericInputTextInputStyles = _this.props.numericInputTextInputStyles ? _this.props.numericInputTextInputStyles : _this.defaultNumericInputTextInputStyles;\n    _this.state = {\n      currentValue: _this.defaultValue,\n      triggerNonDraggablePress: false,\n      nonDraggablePressLocation: null,\n      screenReaderEnabled: false,\n      numericInputValue: \"\"\n    };\n\n    _this.setPreRenderStyles();\n\n    return _this;\n  }\n\n  _createClass(SliderPicker, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var selectionFillStyles = this.selectionFillStylesOverride ? _extends({}, this.selectionFillStylesOverride) : _extends({}, styles.selectionFill);\n      selectionFillStyles['height'] = vh(this.heightPercentage) - this.sliderInnerBorderStyles['borderWidth'] * 2;\n      selectionFillStyles['width'] = this.handleSelectionFillWidth();\n      selectionFillStyles['position'] = 'absolute';\n      this.styleChecker(selectionFillStyles, 'backgroundColor', this.fillColor);\n      var sliderInnerStyles = this.sliderInnerStylesOverride ? _extends({}, this.sliderInnerStylesOverride) : _extends({}, styles.sliderInner);\n      this.styleChecker(sliderInnerStyles, 'height', vh(this.heightPercentage));\n      this.styleChecker(sliderInnerStyles, 'backgroundColor', this.sliderInnerBackgroundColor);\n      sliderInnerStyles['width'] = vw(this.widthPercentage);\n\n      var wrapperStyles = _extends({}, styles.wrapper);\n\n      wrapperStyles['width'] = vw(this.widthPercentage);\n\n      if (!this.showNumberScale) {\n        wrapperStyles['marginBottom'] = vh(2);\n      }\n\n      if (this.state.screenReaderEnabled && this.convertToNumericInputOnScreenReader) {\n        return _jsx(View, {\n          style: this.numericInputContainerStyles,\n          accessible: true,\n          accessibilityLabel: this.accessibilityLabel,\n          accessibilityHint: this.accessibilityHint,\n          accessibilityValue: {\n            'text': this.state.numericInputValue\n          },\n          children: _jsx(TextInput, {\n            keyboardType: \"numeric\",\n            placeholder: String(this.defaultValue),\n            onChangeText: function onChangeText(val) {\n              return _this2.handleNumericInputChange(val);\n            },\n            value: this.state.numericInputValue,\n            style: this.numericInputTextInputStyles\n          })\n        });\n      }\n\n      return _jsxs(TouchableOpacity, {\n        style: wrapperStyles,\n        activeOpacity: 1,\n        onPress: function onPress(evt) {\n          return _this2.handleWrapperPress(evt.nativeEvent.locationX);\n        },\n        children: [_jsxs(View, {\n          style: this.labelsContainerStyles,\n          children: [this.minLabel, this.midLabel, this.maxLabel]\n        }), _jsxs(View, {\n          style: [sliderInnerStyles, this.sliderInnerBorderStyles],\n          children: [this.showFill ? _jsx(View, {\n            style: selectionFillStyles\n          }) : null, _jsx(SliderPickerCursor, {\n            maxOffset: vw(this.widthPercentage),\n            defaultValue: this.defaultValue,\n            triggerNonDraggablePress: this.state.triggerNonDraggablePress,\n            nonDraggablePressLocation: this.state.nonDraggablePressLocation,\n            releaseCallback: function releaseCallback(value) {\n              return _this2.handleChildRelease(value);\n            },\n            buttonBackgroundColor: this.buttonBackgroundColor,\n            buttonBorderColor: this.buttonBorderColor,\n            buttonBorderWidth: this.buttonBorderWidth,\n            buttonDimensionsPercentage: this.buttonDimensionsPercentage,\n            buttonStylesOverride: this.buttonStylesOverride,\n            maxValue: this.maxValue,\n            slideBeginCallback: function slideBeginCallback() {\n              return _this2.slideBeginCallback();\n            },\n            errorToleranceMargin: this.errorToleranceMargin\n          })]\n        }), this.generateSeparators(), this.generateNumbers()]\n      });\n    }\n  }]);\n\n  return SliderPicker;\n}(Component);\nvar styles = StyleSheet.create({\n  wrapper: {\n    justifyContent: 'center',\n    alignSelf: 'center'\n  },\n  labelsContainer: {\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-evenly',\n    alignSelf: 'center',\n    paddingBottom: vw(6)\n  },\n  label: {\n    flex: 1\n  },\n  sliderInner: {\n    justifyContent: 'center',\n    height: vh(1),\n    zIndex: 20\n  },\n  separatorContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    position: 'relative'\n  },\n  separatorLine: {\n    borderLeftWidth: vw(1) / 3,\n    borderLeftColor: 'gainsboro',\n    left: vw(1) / 3,\n    position: 'relative'\n  },\n  selectionFill: {\n    borderRadius: 50,\n    height: vw(2) * .65,\n    position: 'absolute'\n  },\n  numberContainer: _objectSpread({\n    flexDirection: 'row',\n    justifyContent: 'center',\n    marginBottom: vh(2)\n  }, Platform.select({\n    ios: {\n      zIndex: 10\n    }\n  })),\n  buttonTouchable: {\n    alignItems: 'center',\n    zIndex: 20,\n    left: -(vw(1) / 3),\n    borderWidth: 1,\n    borderColor: 'transparent'\n  },\n  buttonNumber: {\n    color: 'dimgray'\n  },\n  noText: _objectSpread({\n    width: vw(25),\n    flexDirection: 'row',\n    backgroundColor: '#f1f4f5',\n    borderBottomColor: \"#889cb2\",\n    borderBottomWidth: vh(1) / 3,\n    marginHorizontal: vw(5),\n    marginVertical: vh(2),\n    padding: vw(4),\n    borderTopLeftRadius: 10,\n    borderTopRightRadius: 10\n  }, Platform.isPad ? {\n    marginTop: vh(4)\n  } : null),\n  validatedText: _objectSpread({\n    width: vw(25),\n    flexDirection: 'row',\n    backgroundColor: '#f1f4f5',\n    borderBottomColor: 'green',\n    borderBottomWidth: vh(1) / 3,\n    marginHorizontal: vw(5),\n    marginVertical: vh(2),\n    padding: vw(4),\n    borderTopLeftRadius: 10,\n    borderTopRightRadius: 10\n  }, Platform.isPad ? {\n    marginTop: vh(4)\n  } : null),\n  numberTextInput: _objectSpread({\n    flex: 1,\n    fontSize: Math.ceil(vw(3) * 1.3)\n  }, Platform.select({\n    ios: {\n      marginTop: vw(2)\n    },\n    android: {\n      paddingBottom: 0,\n      paddingTop: 5\n    }\n  }))\n});","map":{"version":3,"names":["React","Component","vh","vw","SliderPickerCursor","SliderPicker","props","componentDidMount","AccessibilityInfo","isScreenReaderEnabled","screenReaderEnabled","setState","handleNumericInputChange","val","callbackExecuted","numericInputValue","Number","state","maxValue","String","callback","minValue","styleChecker","styleObject","key","value","Object","keys","includes","setPreRenderStyles","setLabelAndLabelContainerStyles","filterSliderInnerBorderStyles","handleLabelCheck","labelsContainerStyles","widthPercentage","labelStyles","labelFontColor","labelFontSize","labelFontWeight","sliderInnerBorderStyles","i","length","defaultValueCheckHandler","isNaN","handleSeparatorStyle","index","currentValue","borderLeftColor","separatorStyles","separatorStylesOverride","styles","separatorLine","heightPercentage","minLabel","emptyLabel","midLabel","maxLabel","handleSelectionFillWidth","handleWrapperPress","locationX","nonDraggablePressLocation","triggerNonDraggablePress","handleChildRelease","labelGenerator","text","align","textAlign","separatorGenerator","color","generateSeparators","showSeparatorScale","separators","push","separatorContainerStyles","separatorContainer","generateNumbers","showNumberScale","numberStyle","numberStylesOverride","buttonNumber","scaleNumberFontColor","scaleNumberFontSize","scaleNumberFontWeight","numbers","width","Math","floor","buttonTouchable","numberContainerStyles","numberContainer","flex","defaultSliderInnerBorderStyles","borderWidth","borderColor","borderBottomColor","borderRadius","defaultNumericInputContainerStyles","flexDirection","backgroundColor","borderBottomWidth","marginHorizontal","marginVertical","padding","borderTopLeftRadius","borderTopRightRadius","Platform","isPad","marginTop","defaultNumericInputTextInputStyles","fontSize","ceil","select","ios","android","paddingBottom","paddingTop","buttonStylesOverride","labelStylesOverride","selectionFillStylesOverride","sliderInnerStylesOverride","labelsContainer","label","defaultValue","slideBeginCallback","errorToleranceMargin","fillColor","showFill","buttonBackgroundColor","buttonBorderColor","buttonBorderWidth","buttonDimensionsPercentage","sliderInnerBackgroundColor","accessibilityLabel","accessibilityHint","convertToNumericInputOnScreenReader","numericInputContainerStyles","numericInputTextInputStyles","selectionFillStyles","selectionFill","sliderInnerStyles","sliderInner","wrapperStyles","wrapper","evt","nativeEvent","StyleSheet","create","justifyContent","alignSelf","display","height","zIndex","position","borderLeftWidth","left","marginBottom","alignItems","noText","validatedText","numberTextInput"],"sources":["/home/joanmarc/Escriptori/coding/soloProject/vaTerra-plant-project/vaTerra/node_modules/react-native-slider-picker/src/components/SliderPicker.js"],"sourcesContent":["/**\n * react-native-slider-picker - NPM Package\n *\n * @module /SliderPicker\n * @description Generic pre-styled slide picker input.\n * @param {String} accessibilityLabel - Optional. Passed to accessibilityLabel prop on numeric TextInput if screen reader is enabled and convertToNumericInputOnScreenReader is `true`. Defaults to an empty string.\n * @param {String} accessibilityHint - Optional. Passed to accessibilityHint prop on numeric TextInput if screen reader is enabled and convertToNumericInputOnScreenReader is `true`. Defaults to an empty string.\n * @param {String} buttonBackgroundColor - Optional. Sets background color of Slider's button. Can pass valid React Native color keywords, hexidecimal, rgb(), or rgba() values. Defaults to `\"white\"`.\n * @param {String} buttonBorderColor - Optional. Sets border color of Slider's button. Can pass valid React Native color keywords, hexidecimal, rgb(), or rgba() values. Defaults to `\"dimgrey\"`.\n * @param {Number} buttonBorderWidth - Optional. Sets border width of Slider's button. Defaults to `1`.\n * @param {Number} buttonDimensionsPercentage - Optional. Sets height and width of Slider's button as percentage of viewport width. Defaults to `1`.\n * @param {Function} callback - Optional. Called on change. Defaults to '() => {}'.\n * @param {Boolean} convertToNumericInputOnScreenReader - Optional. Determines if the component should be converted to a numeric typed TextInput component. Defaults to true.\n * @param {Number} defaultValue - Optional. Default value. Defaults to `5`. If valued passed is greater than maxValue, the value will be set to that of maxValue.\n * @param {Number} errorToleranceMargin - Optional. Defaults to `50`. Margin of error for user to move drag off of the cursor along the Y Axis of the screen/component. If user drags beyond this amount of units in either vertical direction the PanResponder event will not update position of cursor. Is checked to ensure a `Number` type is passed that is greater than `0`.\n * @param {String} fillColor - Optional. Sets fill color of inner slider. Can pass valid React Native color keywords, hexidecimal, rgb(), or rgba() values. Defaults to `\"dodgerblue\"`.\n * @param {Number} heightPercentage - Optional. Percentage of device's viewport to set as component's height. Defaults to `1`.\n * @param {String} labelFontColor - Optional. Sets font color of labels if they are displayed. Can pass valid React Native color keywords, hexidecimal, rgb(), or rgba() values. Defaults to `\"dimgrey\"`.\n * @param {Number} labelFontSize - Optional. Sets font size of labels if they are displayed. Defaults to `28`.\n * @param {String} labelFontWeight - Optional. Sets font weight of labels if they are displayed. Defaults to `\"normal\"`.\n * @param {String} maxLabel - Optional. Label for the maximum value. Defaults to an empty `<View>` component.\n * @param {Number} maxValue - Optional. The maximum value/high end of range for the Slider. Defaults to `10`.\n * @param {String} midLabel - Optional. Label for the medium value. Defaults to an empty `<View>` component.\n * @param {String} minLabel - Optional. Label for the minimum value. Defaults to an empty `<View>` component.\n * @param {Object} numericInputContainerStyles - Optional. StyleSheet rules passed to the `<View>` component that wraps `<TextInput>` in numeric input for screen readers. Defaults to `{ width: vw(25), flexDirection: 'row',backgroundColor: '#f1f4f5', borderBottomColor: \"#889cb2\", borderBottomWidth: vh(1) / 3, marginHorizontal: vw(5), marginVertical: vh(2), padding: vw(4), borderTopLeftRadius: 10, borderTopRightRadius: 10, ... Platform.isPad ? ({  marginTop: vh(4)}) : null }`\n * @param {Object} numericInputTextInputStyles - Optional. StyleSheet rules passed to the `<TextInput>` component in numeric input for screen readers. Defaults to `{ flex: 1, fontSize: Math.ceil(vw(3) * 1.3), ... Platform.select({ ios: {    marginTop: vw(2)  }, android: { paddingBottom: 0, paddingTop: 5  }}) }`\n * @param {String} scaleNumberFontColor - Optional. Sets font color of scale numbers if they are displayed. Can pass valid React Native color keywords, hexidecimal, rgb(), or rgba() values. Defaults to \"dimgrey\".\n * @param {Number} scaleNumberFontSize - Optional. Sets font size of scale numbers if they are displayed. Defaults to `24`.\n * @param {String} scaleNumberFontWeight - Optional. Sets font weight of scale numbers if they are displayed.  Defaults to `\"normal\"`.\n * @param {Boolean} showFill - Optional. Boolean value to determine whether or not the slider inner shows a fill or if it is transparent. Defaults to `true`.\n * @param {Boolean} showNumberScale - Optional. Boolean value to determine whether or not to display scale of numbers for the Slider's range. Defaults to `false`.\n * @param {Boolean} showSeparatorScale - Optional. Boolean value to determine whether or not to display lines dividing the slider into different sections. Defaults to `false`. If maxValue is greater than 10 or widtherPercentage is greater than or equal to 50, will be forced to false.\n * @param {Function} slideBeginCallback  - Optional. Callback function to be executed when Slider's touch event begins. Called in `onPanResponderGrant` property of the component's `panResponder`. Defaults to `() => {}`.\n * @param {String} sliderInnerBackgroundColor - Optional. Sets background color of inner slider View. Can pass valid React Native color keywords, hexidecimal, rgb(), or rgba() values. Defaults to `\"white\"`.\n * @param {Object} sliderInnerBorderStyles - Optional. An object of StyleSheet properties to set border-related styles of sliderInner View component. If passed, the object is filtered to remove any key/value properties that aren't for component's border. Defaults to {}.\n * @param {Number} widthPercentage - Optional. Percentage of device's viewport to set as component's width. \n */\n\n//------------------------------------------------------------------------------\n// Imports\n//------------------------------------------------------------------------------\n// Libraries\nimport React, { Component } from 'react';\nimport { AccessibilityInfo, Platform, StyleSheet, Text, TextInput, TouchableHighlight, TouchableOpacity, View } from 'react-native';\nimport { vh, vw } from 'react-native-css-vh-vw';\n\n// Components\nimport { SliderPickerCursor } from './SliderPickerCursor';\n\n//------------------------------------------------------------------------------\n// Component\n//------------------------------------------------------------------------------\nexport class SliderPicker extends Component {\n  /**\n   * Constructor\n   */\n  constructor(props) {\n    super(props);\n\n    //\n    // Styled empty View to set as label value if respective prop is not passed.\n    // \n    this.emptyLabel = (<View style={{ flex: 1 }}></View>);\n\n    // Default border styles in case nothing is passed.\n    this.defaultSliderInnerBorderStyles = {\n      borderWidth: vw(1) / 2,\n      borderColor: '#d9dce4', \n      borderBottomColor: '#f1f4f5',\n      borderRadius: 50,\n    }\n\n    // Default styles for View container of accessibility/screen reader numeric input replacement\n    this.defaultNumericInputContainerStyles = {\n      width: vw(25),\n      flexDirection: 'row',\n      backgroundColor: '#f1f4f5',\n      borderBottomColor: \"#889cb2\",\n      borderBottomWidth: vh(1) / 3,\n      marginHorizontal: vw(5),\n      marginVertical: vh(2),\n      padding: vw(4),\n      borderTopLeftRadius: 10,\n      borderTopRightRadius: 10,\n      ... Platform.isPad ? ({\n        marginTop: vh(4)\n      }) : null\n    }\n\n    // Default styles for TextInput of accessibility/screen reader numeric input replacement\n    this.defaultNumericInputTextInputStyles = {\n      flex: 1,\n      fontSize: Math.ceil(vw(3) * 1.3),\n      ... Platform.select({\n        ios: {\n          marginTop: vw(2)\n        },\n        android: {\n          paddingBottom: 0,\n          paddingTop: 5\n        }\n      })\n    }\n\n    //\n    // Props checking for overriding element styles\n    //\n    this.buttonStylesOverride = this.props.buttonStylesOverride ? this.props.buttonStylesOverride : null;\n    this.labelStylesOverride = this.props.labelStylesOverride ? this.props.labelStylesOverride : null;\n    this.numberStylesOverride = this.props.numberStylesOverride ? this.props.numberStylesOverride : null;\n    this.selectionFillStylesOverride = this.props.selectionFillStylesOverride ? this.props.selectionFillStylesOverride : null;\n    this.separatorStylesOverride = this.props.separatorStylesOverride ? this.props.separatorStylesOverride : null;\n    this.sliderInnerStylesOverride = this.props.sliderInnerStylesOverride ? this.props.sliderInnerStylesOverride : null;\n\n    // Initialize dynamic style objects\n    this.labelsContainerStyles = Object.assign({}, styles.labelsContainer);\n\n    this.labelStyles = this.labelStylesOverride ?\n      Object.assign({}, this.labelStylesOverride) :\n      Object.assign({}, styles.label);\n\n    //\n    // Functional Props checking\n    //\n    this.callback =  this.props.callback ? this.props.callback : () => {};\n    this.defaultValue = this.defaultValueCheckHandler(this.props.defaultValue) ? this.props.defaultValue : 5;\n    this.maxValue = this.props.maxValue ? this.props.maxValue : 10;\n    this.slideBeginCallback = this.props.slideBeginCallback ? this.props.slideBeginCallback : () => {};\n    this.errorToleranceMargin = this.props.errorToleranceMargin ? this.props.errorToleranceMargin : 50;\n\n    // Make sure that value of errorToleranceMargin is a Number greater than 0\n    if (isNaN(this.errorToleranceMargin) || this.errorToleranceMargin < 0) {\n      this.errorToleranceMargin = null;\n    }\n\n    //\n    // General Styling Props checking\n    //\n    this.fillColor =  this.props.fillColor ? this.props.fillColor : 'dodgerblue';\n    this.heightPercentage =  this.props.heightPercentage ? this.props.heightPercentage : 1;\n    this.maxLabel = this.props.maxLabel ? this.labelGenerator(this.props.maxLabel, 'right') : this.emptyLabel;\n    this.midLabel = this.props.midLabel ? this.labelGenerator(this.props.midLabel, 'center') : this.emptyLabel;\n    this.minLabel = this.props.minLabel ? this.labelGenerator(this.props.minLabel, 'left') : this.emptyLabel;\n    this.showFill = this.props.showFill === false ? false : true;\n    this.showNumberScale = this.props.showNumberScale ? this.props.showNumberScale : false;\n    this.showSeparatorScale = this.props.showSeparatorScale ? this.props.showSeparatorScale : false;\n    this.widthPercentage = this.props.widthPercentage ? this.props.widthPercentage : 85;\n\n    //\n    // Specific Styling Props checking\n    //\n    this.buttonBackgroundColor =  this.props.buttonBackgroundColor ? this.props.buttonBackgroundColor : 'white';\n    this.buttonBorderColor =  this.props.buttonBorderColor ? this.props.buttonBorderColor : 'dimgrey';\n    this.buttonBorderWidth = this.props.buttonBorderWidth ? this.props.buttonBorderWidth : 1;\n    this.buttonDimensionsPercentage = this.props.buttonDimensionsPercentage ? this.props.buttonDimensionsPercentage : 6;\n    this.labelFontColor = this.props.labelFontColor ? this.props.labelFontColor : 'dimgrey';\n    this.labelFontSize = this.props.labelFontSize ? this.props.labelFontSize : 28;\n    this.labelFontWeight = this.props.labelFontWeight ? this.props.labelFontWeight : 'normal';\n    this.scaleNumberFontColor = this.props.scaleNumberFontColor ? this.props.scaleNumberFontColor : 'dimgrey';\n    this.scaleNumberFontSize = this.props.scaleNumberFontSize ? this.props.scaleNumberFontSize : 24;\n    this.scaleNumberFontWeight = this.props.scaleNumberFontWeight ? this.props.scaleNumberFontWeight : 'normal';\n    this.sliderInnerBackgroundColor = this.props.sliderInnerBackgroundColor ? this.props.sliderInnerBackgroundColor : 'white';\n    this.sliderInnerBorderStyles = this.props.sliderInnerBorderStyles ? this.props.sliderInnerBorderStyles : this.defaultSliderInnerBorderStyles;\n\n    // If maxValue is greater than 10 or if slider will take up less than 50% of\n    // viewport width, force scale-related values to false.\n    if (this.maxValue > 10 || this.widthPercentage <= 50) {\n      this.showNumberScale = false;\n      this.showSeparatorScale = false;\n    }\n\n    // Make sure that defaultValue isn't out of range\n    if (this.defaultValue > this.maxValue) {\n      this.defaultValue = this.maxValue;\n    }\n\n    //\n    // AccessibilityInfo props checking\n    //\n    this.accessibilityLabel = this.props.accessibilityLabel ? String(this.props.accessibilityLabel) : '';\n    this.accessibilityHint = this.props.accessibilityHint ? String(this.props.accessibilityHint) : '';\n    this.convertToNumericInputOnScreenReader = this.props.convertToNumericInputOnScreenReader === false ? false : true;\n\n    //\n    // Styling props for screen reader numeric input container styles\n    //\n    this.numericInputContainerStyles = this.props.numericInputContainerStyles ? \n      this.props.numericInputContainerStyles :\n      this.defaultNumericInputContainerStyles;\n\n    this.numericInputTextInputStyles = this.props.numericInputTextInputStyles ?\n      this.props.numericInputTextInputStyles :\n      this.defaultNumericInputTextInputStyles;\n\n    //\n    // Initialize state variables\n    //\n    this.state = {\n      currentValue: this.defaultValue,\n      triggerNonDraggablePress: false,\n      nonDraggablePressLocation: null,\n      screenReaderEnabled: false,\n      numericInputValue: \"\"\n    }\n\n    // Sets styles pre-render\n    this.setPreRenderStyles();\n  }\n\n  /**\n   * Render\n   */\n  render() {\n\n    //\n    // Dynamic styles that update with state\n    //\n\n    // Make copy of styles.selectionFill to modify programmatically below\n    let selectionFillStyles = this.selectionFillStylesOverride ? \n      Object.assign({}, this.selectionFillStylesOverride) :\n      Object.assign({}, styles.selectionFill);\n\n    // Set height of selectionFillStyles according to value of heightPercentage passed.\n    selectionFillStyles['height'] = vh(this.heightPercentage) - (this.sliderInnerBorderStyles['borderWidth'] * 2);\n\n    // Set width of selectionFillStyles to result of this.handleSelectionFillWidth()\n    selectionFillStyles['width'] = this.handleSelectionFillWidth();\n    selectionFillStyles['position'] = 'absolute';\n\n    // Set backgroundColor of sliderInnerStyles based on props.heightPercentage\n    this.styleChecker(selectionFillStyles, 'backgroundColor', this.fillColor);\n\n    // Make copy of styles.sliderInner to modify programmatically below\n    let sliderInnerStyles = this.sliderInnerStylesOverride ? \n      Object.assign({}, this.sliderInnerStylesOverride) : \n      Object.assign({}, styles.sliderInner);\n\n    // Set height of sliderInnerStyles based on props.heightPercentage\n    this.styleChecker(sliderInnerStyles, 'height', vh(this.heightPercentage));\n    this.styleChecker(sliderInnerStyles, 'backgroundColor', this.sliderInnerBackgroundColor);\n\n    // Set width of sliderInnerStyles based on props.widthPercentage\n    sliderInnerStyles['width'] = vw(this.widthPercentage);\n\n    // Make copies of styles.wrapper with a set width.\n    let wrapperStyles = Object.assign({}, styles.wrapper);\n\n    // Set width of wrapper to value passed to props.widthPercentage\n    wrapperStyles['width'] = vw(this.widthPercentage);\n\n    // Add some bottom margin if number scale is not being shown\n    if (!this.showNumberScale) {\n      wrapperStyles['marginBottom'] = vh(2);\n    }\n\n    // If screen reader is enabled and convert to number input prop is true, return numeric TextInput\n    if (this.state.screenReaderEnabled && this.convertToNumericInputOnScreenReader) {\n      return (\n        <View style={this.numericInputContainerStyles}\n              accessible={true}\n              accessibilityLabel={this.accessibilityLabel}\n              accessibilityHint={this.accessibilityHint}\n              accessibilityValue={ {'text': this.state.numericInputValue} }\n        >\n          <TextInput\n            keyboardType=\"numeric\"\n            placeholder={String(this.defaultValue)}\n            onChangeText={(val) => this.handleNumericInputChange(val)}\n            value={this.state.numericInputValue}\n            style={this.numericInputTextInputStyles}\n          />\n        </View>\n      )\n    }\n\n    return (\n      // Wrapper for slider\n      <TouchableOpacity\n        style={wrapperStyles}\n        activeOpacity={1}\n        onPress={(evt) => this.handleWrapperPress(evt.nativeEvent.locationX)}\n      >\n  \n        { /* Labels */ }\n        <View style={this.labelsContainerStyles}>\n          {this.minLabel}\n          {this.midLabel}\n          {this.maxLabel}\n        </View>\n  \n        {/* Slider itself */}\n        <View style={[sliderInnerStyles, this.sliderInnerBorderStyles]}>\n\n          {/* Styled \"fill\" bar */}\n          {this.showFill ? <View style={selectionFillStyles}></View> : null}\n\n          {/* SliderPickerCursor button */}\n          <SliderPickerCursor \n            maxOffset={vw(this.widthPercentage)}\n            defaultValue={this.defaultValue}\n            triggerNonDraggablePress={this.state.triggerNonDraggablePress}\n            nonDraggablePressLocation={this.state.nonDraggablePressLocation}\n            releaseCallback={(value) => this.handleChildRelease(value)}\n            buttonBackgroundColor={this.buttonBackgroundColor}\n            buttonBorderColor={this.buttonBorderColor}\n            buttonBorderWidth={this.buttonBorderWidth}\n            buttonDimensionsPercentage={this.buttonDimensionsPercentage}\n            buttonStylesOverride={this.buttonStylesOverride}\n            maxValue={this.maxValue}\n            slideBeginCallback={() => this.slideBeginCallback()}\n            errorToleranceMargin={this.errorToleranceMargin}\n          />\n        </View>\n  \n        { /* Lines between the numbers */ }\n        {this.generateSeparators()}\n  \n        { /* Buttons for picking a value */ }\n        {this.generateNumbers()}\n\n      </TouchableOpacity>\n    )\n  }\n\n  /** \n   * On componentDidMount()\n   * - Check if user's device has screen reader enabled.\n   * - If it does check if component should be convereted to a numeric input.\n   */\n  componentDidMount = async () => {\n    // Determine if user is using a screen reader\n    let screenReaderEnabled = await AccessibilityInfo.isScreenReaderEnabled()\n\n    this.setState({ screenReaderEnabled });\n  }\n\n  /** \n   * Handler function called on value change of TextInput component for screen reader enabled. Updates value of this.state.numericInputValue and makes sure it is not greater than 10.\n   * @param {String} val - Value of TextInput component.\n   * @return {null} Updates local state\n   */\n  handleNumericInputChange = (val) => {\n    // Flag to determine if callback has already been called by end of function.\n    let callbackExecuted = false;\n\n    this.setState({ numericInputValue: val }, () => {\n      // Make sure value isn't greater than this.maxValue\n      if (Number(this.state.numericInputValue) > this.maxValue) {\n        this.setState({ \n          numericInputValue: String(this.maxValue)\n        }, () => {\n          this.callback(this.state.numericInputValue);\n          // Flip callback flag\n          callbackExecuted = true;\n        });\n      }\n      // Make sure value isn't less than this.minValue\n      else if (Number(this.state.numericInputValue) < this.minValue) {\n        this.setState({ \n          numericInputValue: String(this.minValue)\n        }, () => {\n          this.callback(this.state.numericInputValue);\n          // Flip callback flag\n          callbackExecuted = true;\n        });\n      }\n\n      // If callback hasn't been called already, call it\n      if (!callbackExecuted) {\n        this.callback(this.state.numericInputValue);\n      }\n    });\n  }\n\n  /** \n   * Adds a key/value pair to a style object if it does not already have a value for key passed.\n   * @return {null}\n   */\n  styleChecker = (styleObject, key, value) => {\n    // If current style object doesn't include key passed\n    if ( !Object.keys(styleObject).includes(key) ) {\n      // Update it to value passed\n      styleObject[key] = value;\n    }\n  }\n\n  /** \n   * Helper method to call any other styling-related helper methods that must be called before component is rendered. \n   * @return {null}\n   */\n  setPreRenderStyles = () => {\n    this.setLabelAndLabelContainerStyles();\n    this.filterSliderInnerBorderStyles();\n  }\n\n  /** \n   * Helper method to set to set styles on labels and container and labels depending on props.\n   * @return {null}\n   */\n  setLabelAndLabelContainerStyles = () => {\n    // If handleLabelCheck() returns true, \n    // add extra bottom padding to labelsContainerStyles to account for elements lack of height.\n    if (this.handleLabelCheck()) {\n      this.labelsContainerStyles['paddingBottom'] = vh(5);\n    }\n\n    // Set width according to props.widthPercentage + 1\n    this.labelsContainerStyles['width'] = vw((this.widthPercentage) + 1);\n\n    // Set label styles\n    this.labelStyles['color'] = this.labelFontColor;\n    this.labelStyles['fontSize'] = this.labelFontSize;\n    this.labelStyles['fontWeight'] = this.labelFontWeight;\n  }\n\n  /** \n   * Helper method to filter out any key/value pairs from sliderInnerBorderStyles that are not for a component's border.\n   * @return {null}\n   */\n  filterSliderInnerBorderStyles = () => {\n    // Get all keys in style object\n    let keys = Object.keys(this.sliderInnerBorderStyles);\n\n    // Loop through keys\n    for (let i = 0; i < keys.length; i++) {\n      // If key doesn't include \"border\"\n      if (!(keys[i].includes('border'))) {\n        // Delete it from the object\n        delete this.sliderInnerBorderStyles[keys[i]];\n      }\n    }\n  }\n\n  /** \n   * Helper method to determine whether or not valued passed to props.defaultValue is a Number and within the range of the slider scale.\n   * @param {Number} value - The value passed to props.defaultValue\n   * @return {Boolean} Returns true if props.defaultValue is valid, false if not valid.\n   */\n  defaultValueCheckHandler = (value) => {\n    // If value passed is not a number or if it's out of range.\n    if (isNaN(value) || value > this.maxValue || value < 0) {\n      // Set to default\n      return false;\n    }\n    // Otherwise return value passed.\n    return true;\n  }\n\n  /** \n   * Helper method to set styles for each separator. Called in this.separatorGenerator()\n   * @param {Number} index - The index of event target.\n   * @return {Number} Returns new width of selectionFill based on this.state.currentValue\n   */\n  handleSeparatorStyle = (index) => {\n    // If index is 0 or this.maxValue, or if separator is for currently active set border \n    // to transparent so it's not visible\n    if (index === 0 || index === this.maxValue || index === this.state.currentValue) {\n      return { borderLeftColor: 'transparent' };\n    }\n\n    let separatorStyles = this.separatorStylesOverride ?\n      Object.assign({}, this.separatorStylesOverride) : \n      Object.assign({}, styles.separatorLine);\n\n    // Adjust height of separators to three times the height of the slider\n    this.styleChecker(separatorStyles, 'height', vh(this.heightPercentage) * 3);\n\n    return separatorStyles;\n  }\n\n  /** \n   * Helper function to check if none of the label props were passed. Used in render() to determine if styles.labelsContainer needs to be modified programmatically.\n   * @return {Boolean} Returns true is no label props were passed, returns false otherwise\n   */\n  handleLabelCheck = () => {\n  if  (this.minLabel === this.emptyLabel && \n        this.midLabel === this.emptyLabel &&\n        this.maxLabel === this.emptyLabel\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  /** \n   * Helper method to format width of selectionFill.\n   * @return {Number} Returns new width of selectionFill based on currentValue\n   */\n  handleSelectionFillWidth = () => {\n    return (vw(this.widthPercentage) * (this.state.currentValue / (this.maxValue) )) - (vh(1) * .5);\n  }\n\n  /** \n   * Handler for press of <Slider> outside of the <Draggable> component. Updates state variables passed to <Draggable> to trigger a re-render of that component in its componentDidUpdate().\n   * @param {Number} locationX - Location on x-axis where touch event took place/where used pressed along <Slider>.\n   * @return {Function} Executes state updaters for draggablePressLocation and triggerNonDraggablePress\n   */\n  handleWrapperPress = (locationX) => {\n    this.setState({\n      nonDraggablePressLocation: locationX,\n      triggerNonDraggablePress: true\n    });\n  }\n\n  /** \n   * Handler for when user's gesture ends in <Draggable>'s panResponder instance (when they release the visual \"button\"). Fetches nearest value to release in <Draggable> and hoists that value to use as state in <Slider> to update state-dependent styles. Executes props.callback passed to <Slider>, and updates state.triggerNonDraggablePress which trickles down to <Draggable>.\n   * @param {Number} locationX - Location on x-axis where touch event took place/where used pressed along <Slider>.\n   * @return {Function} Executes props.callback and state updaters for both currentValue and triggerNonDraggablePress.\n   */\n  handleChildRelease = (value) => {\n    this.setState({\n      currentValue: value,\n      triggerNonDraggablePress: false\n    }, () => this.callback(value));\n  }\n\n  /** \n   * Helper method to format a styled label Text component\n   * @param {String} text - The text to be displayed in Text component\n   * @param {String} align - The value to set textAlign of component to \n   * @return {Component} Returns a styled Text component\n   */\n  labelGenerator = (text, align) => {\n    return (\n      <Text style={[this.labelStyles, { textAlign: align }]}>\n        {text}\n      </Text>\n    )\n  }\n\n  /** \n   * Helper method to generate separators layered underneath the sliderContainer\n   * @param {Number} index - The index of event target.\n   * @return {Component} View component with nested Text component\n   */\n  separatorGenerator = (index) => {\n    return (\n      <View key={index} style={this.handleSeparatorStyle(index)}>\n        <Text style={{ color: 'transparent'}}>|</Text> \n      </View>\n    );\n  }\n\n  /** \n   * If props.showSeparatorScale is true, calls this.separatorGenerator() for props.maxValue times. Pushes these into an array and returns array wrapped in a View component.\n   * @return {Component} View component with nested View separators\n   */\n  generateSeparators = () => {\n    // Don't return anything if props.showSeparatorScale is false.\n    if (!this.showSeparatorScale) {\n      return null;\n    }\n\n    // Initialize empty array to push separators and number push buttons into below\n    let separators = [];\n\n    // For 0 through this.maxValue, push a styled separator into separators array via helper\n    // method, this.separatorGenerator(). Will be rendered in JSX below.\n    for (let i = 0; i <= this.maxValue; i++) {\n      separators.push(this.separatorGenerator(i));\n    }\n\n    // Set width of separator container\n    let separatorContainerStyles = Object.assign({}, styles.separatorContainer);\n    separatorContainerStyles['width'] = vw(this.widthPercentage);\n\n    // Set bottom property. Container is relatively positioned.\n    separatorContainerStyles['bottom'] = vh(this.heightPercentage) * 2;\n\n    return (\n      <View style={separatorContainerStyles}>\n        {separators}\n      </View>\n    )\n  }\n\n  /** \n   * If props.showNumberScale is true, generates a TouchableHighlight for each number in slider's range.\n   * @return {Component} View component with nested View separators\n   */\n  generateNumbers = () => {\n    // Don't return anything if props.showNumberScale is false.\n    if (!this.showNumberScale) {\n      return null;\n    }\n\n    // Make copy of styles.buttonNumber to modify programmatically\n    let numberStyle = this.numberStylesOverride ?\n      Object.assign({}, this.numberStylesOverride) :\n      Object.assign({}, styles.buttonNumber);\n\n    // Set numberStyle properties based on respective props\n    this.styleChecker(numberStyle, 'color', this.scaleNumberFontColor);\n    this.styleChecker(numberStyle, 'fontSize', this.scaleNumberFontSize);\n    this.styleChecker(numberStyle, 'fontWeight', this.scaleNumberFontWeight);\n\n    // Initialize empty array to push numbers into\n    let numbers = [];\n\n    // For 0 through this.maxValue, push a styled button into numbers. \n    // Will be rendered in JSX below.\n    for (let i = 0; i <= this.maxValue; i++) {\n\n      // Initialize width variable to set the width of each TouchableHighlight.\n      // Default value is the rounded down - numbersContainers width divided by this.maxValue - 0 (number of options).\n      let width = Math.floor(vw(this.widthPercentage) / (this.maxValue));\n      \n      // If first TouchableHighlight, add extra width to account for the width of separatorLine.\n      width = i === 0 ? width + ((vw(1) / 3) * 2) : width;\n\n      // Push styled TouchableHighlight\n      numbers.push(\n        <TouchableHighlight \n          key={i}\n          style={[styles.buttonTouchable, { width: width }]} // Add width here\n        >\n          <Text style={numberStyle}>{i}</Text>\n        </TouchableHighlight>\n      )\n    }\n\n    // Set width of number container\n    let numberContainerStyles = Object.assign({}, styles.numberContainer);\n    numberContainerStyles['width'] = vw(this.widthPercentage);\n\n    // If no separators are being displayed,\n    if (!this.showSeparatorScale) {\n      // Add some top margin to account for spacing\n      numberContainerStyles['marginTop'] = this.scaleNumberFontSize * .75;\n    }\n\n    return (\n      <View style={numberContainerStyles}>\n        {numbers}\n      </View>\n    )\n  }\n}\n\n//------------------------------------------------------------------------------\n// Local Styles\n//------------------------------------------------------------------------------\nconst styles = StyleSheet.create({\n  //\n  // Component level wrapper. TouchableOpacity component\n  //\n  wrapper: {\n    justifyContent: 'center',\n    alignSelf: 'center',\n  },\n  //\n  // Container for labels. (View component)\n  //\n  labelsContainer: { \n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-evenly',\n    alignSelf: 'center',\n    paddingBottom: vw(6) // For when there is at least one label passed (this will be changed to vh(5) if no labels passed)\n  },\n  //\n  // Label text (Text component)\n  //\n  label: {\n    flex: 1,\n  },\n  //\n  // Inner container of slider, acts as \"track\" for slider cursor. (View component)\n  //\n  sliderInner: {\n    justifyContent: 'center',\n    height: vh(1),\n    zIndex: 20,\n  },\n  //\n  // Container for separator lines, layered behind the sliderContainer. View component\n  //\n  separatorContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    position: 'relative'\n  },\n  //\n  // Lines separating each \"section\" of the slider. View components.\n  //\n  separatorLine: {\n    borderLeftWidth: vw(1) / 3,\n    borderLeftColor: 'gainsboro',\n    left: vw(1) / 3,\n    position: 'relative',\n  },\n  //\n  // The styled indication bar. Width is dependent on currently-picked value. View component\n  //\n  selectionFill: {\n    borderRadius: 50,\n    height: vw(2) * .65,\n    position: 'absolute',\n  },  \n  //\n  // Container for numbers. View component\n  //\n  numberContainer: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    marginBottom: vh(2),\n    ... Platform.select({\n      ios: {\n        zIndex: 10\n      }\n    })\n  },\n  //\n  // Each number button's container. TouchableHighlight component.\n  //\n  buttonTouchable: {\n    alignItems: 'center',\n    zIndex: 20,\n    left: -(vw(1) / 3),\n    borderWidth: 1,\n    borderColor: 'transparent'\n  },\n  //\n  // Text of button number. Text component\n  //\n  buttonNumber: {\n    color: 'dimgray',\n  },\n  //\n  // View component. Styling for the wrapper of the numeric TextInput when it's empty.\n  //\n  noText: {\n    width: vw(25),\n    flexDirection: 'row',\n    backgroundColor: '#f1f4f5',\n    borderBottomColor: \"#889cb2\",\n    borderBottomWidth: vh(1) / 3,\n    marginHorizontal: vw(5),\n    marginVertical: vh(2),\n    padding: vw(4),\n    borderTopLeftRadius: 10,\n    borderTopRightRadius: 10,\n    ... Platform.isPad ? ({\n      marginTop: vh(4)\n    }) : null\n  },\n  //\n  // View component. Wrapper for numeric TextInput\n  //\n  validatedText: {\n    width: vw(25),\n    flexDirection: 'row',\n    backgroundColor: '#f1f4f5',\n    borderBottomColor: 'green',\n    borderBottomWidth: vh(1) / 3,\n    marginHorizontal: vw(5),\n    marginVertical: vh(2),\n    padding: vw(4),\n    borderTopLeftRadius: 10,\n    borderTopRightRadius: 10,\n    ... Platform.isPad ? ({\n      marginTop: vh(4)\n    }) : null\n  },\n  //\n  // TextInput component. Numeric input for screen readers enabled.\n  //\n  numberTextInput: {\n    flex: 1,\n    fontSize: Math.ceil(vw(3) * 1.3),\n    ... Platform.select({\n      ios: {\n        marginTop: vw(2)\n      },\n      android: {\n        paddingBottom: 0,\n        paddingTop: 5\n      }\n    }),\n  }\n});"],"mappings":"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"},"metadata":{},"sourceType":"module"}