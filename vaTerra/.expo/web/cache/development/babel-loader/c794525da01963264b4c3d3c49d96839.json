{"ast":null,"code":"import Dimensions from \"react-native-web/dist/exports/Dimensions\";\nmodule.exports = {\n  vh: function vh(percentage) {\n    var viewportHeight = Dimensions.get('window').height;\n    var decimal = percentage * .01;\n    percentage = parseInt(percentage, 10);\n\n    if (percentage < 0) {\n      percentage = 100;\n    }\n\n    if (percentage > 1000) {\n      percentage = 1000;\n    }\n\n    return Math.round(viewportHeight * decimal);\n  },\n  vw: function vw(percentage) {\n    var viewportWidth = Dimensions.get('window').width;\n    var decimal = percentage * .01;\n    percentage = parseInt(percentage, 10);\n\n    if (percentage < 0) {\n      percentage = 100;\n    }\n\n    if (percentage > 1000) {\n      percentage = 1000;\n    }\n\n    return Math.round(viewportWidth * decimal);\n  }\n};","map":{"version":3,"names":["module","exports","vh","percentage","viewportHeight","Dimensions","get","height","decimal","parseInt","Math","round","vw","viewportWidth","width"],"sources":["/home/joanmarc/Escriptori/coding/soloProject/vaTerra-plant-project/vaTerra/node_modules/react-native-css-vh-vw/src/index.js"],"sourcesContent":["import { Dimensions } from 'react-native';\n\nmodule.exports = {\n  /**\n   * CSS vh ditto. Returns in pixels a fraction of the viewport height.\n   * \n   * @param {Number} percentage\n   * @return {Number} percentage of the window view height in value of pixels.\n  */\n  vh: (percentage) => {\n    const viewportHeight = Dimensions.get('window').height;\n    const decimal = percentage * .01;\n    percentage = parseInt(percentage, 10);\n\n    // Hard limits\n    if (percentage < 0) {\n      percentage = 100;\n    }\n    if (percentage > 1000) {\n      percentage = 1000;\n    }\n\n    return Math.round(viewportHeight * decimal);\n  },\n  /**\n   * CSS vw ditto. Returns in pixels a fraction of the viewport width.\n   * \n   * @param {Number} percentage\n   * @return {Number} percentage of the window view width in value of pixels.\n  */\n  vw: (percentage) => {\n    const viewportWidth = Dimensions.get('window').width;\n    const decimal = percentage * .01;\n    percentage = parseInt(percentage, 10);\n\n    // Hard limits\n    if (percentage < 0) {\n      percentage = 100;\n    }\n    if (percentage > 1000) {\n      percentage = 1000;\n    }\n\n    return Math.round(viewportWidth * decimal);\n  }\n}"],"mappings":";AAEAA,MAAM,CAACC,OAAP,GAAiB;EAOfC,EAAE,EAAE,YAACC,UAAD,EAAgB;IAClB,IAAMC,cAAc,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBC,MAAhD;IACA,IAAMC,OAAO,GAAGL,UAAU,GAAG,GAA7B;IACAA,UAAU,GAAGM,QAAQ,CAACN,UAAD,EAAa,EAAb,CAArB;;IAGA,IAAIA,UAAU,GAAG,CAAjB,EAAoB;MAClBA,UAAU,GAAG,GAAb;IACD;;IACD,IAAIA,UAAU,GAAG,IAAjB,EAAuB;MACrBA,UAAU,GAAG,IAAb;IACD;;IAED,OAAOO,IAAI,CAACC,KAAL,CAAWP,cAAc,GAAGI,OAA5B,CAAP;EACD,CArBc;EA4BfI,EAAE,EAAE,YAACT,UAAD,EAAgB;IAClB,IAAMU,aAAa,GAAGR,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBQ,KAA/C;IACA,IAAMN,OAAO,GAAGL,UAAU,GAAG,GAA7B;IACAA,UAAU,GAAGM,QAAQ,CAACN,UAAD,EAAa,EAAb,CAArB;;IAGA,IAAIA,UAAU,GAAG,CAAjB,EAAoB;MAClBA,UAAU,GAAG,GAAb;IACD;;IACD,IAAIA,UAAU,GAAG,IAAjB,EAAuB;MACrBA,UAAU,GAAG,IAAb;IACD;;IAED,OAAOO,IAAI,CAACC,KAAL,CAAWE,aAAa,GAAGL,OAA3B,CAAP;EACD;AA1Cc,CAAjB"},"metadata":{},"sourceType":"module"}