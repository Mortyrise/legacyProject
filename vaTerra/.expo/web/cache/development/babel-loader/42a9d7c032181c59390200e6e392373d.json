{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport Constants from 'expo-constants';\nimport firebase from \"./config/firebase\";\nimport { AntDesign, Feather } from '@expo/vector-icons';\nimport uplodImageFromDevice from \"../utils/uploadImageFromDevice\";\nimport getBlobFromUri from \"../utils/fetchUploadableImageBinaryData\";\nimport manageFileUpload from \"../utils/uploadBinaryDataToFirebaseStorage\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar ImagePicker = function ImagePicker(props) {\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      imgURI = _React$useState2[0],\n      setImageURI = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      isUploading = _React$useState4[0],\n      setIsUploading = _React$useState4[1];\n\n  var _React$useState5 = React.useState(0),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      progress = _React$useState6[0],\n      setProgress = _React$useState6[1];\n\n  var _React$useState7 = React.useState(''),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      remoteURL = _React$useState8[0],\n      setRemoteURL = _React$useState8[1];\n\n  var _React$useState9 = React.useState(null),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      error = _React$useState10[0],\n      setError = _React$useState10[1];\n\n  var _useWindowDimensions = useWindowDimensions(),\n      width = _useWindowDimensions.width;\n\n  var handleLocalImageUpload = function _callee() {\n    var fileURI;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(uplodImageFromDevice());\n\n          case 2:\n            fileURI = _context.sent;\n\n            if (fileURI) {\n              setImageURI(fileURI);\n            }\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var onStart = function onStart() {\n    setIsUploading(true);\n  };\n\n  var onProgress = function onProgress(progress) {\n    setProgress(progress);\n  };\n\n  var onComplete = function onComplete(fileUrl) {\n    setRemoteURL(fileUrl);\n    setIsUploading(false);\n    setImageURI(null);\n  };\n\n  var onFail = function onFail(error) {\n    setError(error);\n    setIsUploading(false);\n  };\n\n  var handleCloudImageUpload = function _callee2() {\n    var fileToUpload, blob;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (imgURI) {\n              _context2.next = 2;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 2:\n            fileToUpload = null;\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(getBlobFromUri(imgURI));\n\n          case 5:\n            blob = _context2.sent;\n            _context2.next = 8;\n            return _regeneratorRuntime.awrap(manageFileUpload(blob, {\n              onStart: onStart,\n              onProgress: onProgress,\n              onComplete: onComplete,\n              onFail: onFail\n            }));\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.heading,\n      children: \"Attach and upload image\"\n    }), Boolean(imgURI) && _jsx(View, {\n      children: _jsx(Image, {\n        source: {\n          uri: imgURI\n        },\n        resizeMode: \"contain\",\n        style: {\n          width: width,\n          height: width\n        }\n      })\n    }), !isUploading && _jsxs(View, {\n      style: styles.row,\n      children: [_jsx(AntDesign, {\n        name: \"addfile\",\n        size: 36,\n        color: imgURI ? 'green' : 'black',\n        onPress: handleLocalImageUpload\n      }), Boolean(imgURI) && _jsx(Feather, {\n        name: \"upload-cloud\",\n        size: 36,\n        color: \"black\",\n        onPress: handleCloudImageUpload\n      })]\n    }), isUploading && _jsx(View, {\n      style: styles.uploadProgressContainer,\n      children: _jsxs(Text, {\n        children: [\" Upload \", progress, \" of 100% \"]\n      })\n    }), Boolean(remoteURL) && _jsx(View, {\n      style: {\n        paddingVertical: 20\n      },\n      children: _jsxs(Text, {\n        children: [\"Image has been uploaded at\", _jsxs(Text, {\n          style: {\n            color: 'blue'\n          },\n          children: [\" \", remoteURL, \" \"]\n        })]\n      })\n    })]\n  });\n};\n\nexport default ImagePicker;\nvar styles = StyleSheet.create({});","map":{"version":3,"names":["React","Constants","firebase","AntDesign","Feather","uplodImageFromDevice","getBlobFromUri","manageFileUpload","ImagePicker","props","useState","imgURI","setImageURI","isUploading","setIsUploading","progress","setProgress","remoteURL","setRemoteURL","error","setError","useWindowDimensions","width","handleLocalImageUpload","fileURI","onStart","onProgress","onComplete","fileUrl","onFail","handleCloudImageUpload","fileToUpload","blob","styles","container","heading","Boolean","uri","height","row","uploadProgressContainer","paddingVertical","color","StyleSheet","create"],"sources":["/home/joanmarc/Escriptori/coding/soloProject/vaTerra-plant-project/vaTerra/components/ImagePicker.jsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Text,\n  View,\n  StyleSheet,\n  Image,\n  Platform,\n  useWindowDimensions,\n} from 'react-native';\nimport Constants from 'expo-constants';\nimport firebase from './config/firebase';\nimport { AntDesign, Feather } from '@expo/vector-icons';\nimport uplodImageFromDevice from '../utils/uploadImageFromDevice';\nimport getBlobFromUri from '../utils/fetchUploadableImageBinaryData';\nimport manageFileUpload from '../utils/uploadBinaryDataToFirebaseStorage';\n\nconst ImagePicker = (props) => {\n  const [imgURI, setImageURI] = React.useState(null);\n\n  const [isUploading, setIsUploading] = React.useState(false);\n  const [progress, setProgress] = React.useState(0);\n  const [remoteURL, setRemoteURL] = React.useState('');\n\n  const [error, setError] = React.useState(null);\n  const { width } = useWindowDimensions();\n\n  const handleLocalImageUpload = async () => {\n    const fileURI = await uplodImageFromDevice();\n\n    if (fileURI) {\n      setImageURI(fileURI);\n    }\n  };\n\n  const onStart = () => {\n    setIsUploading(true);\n  };\n\n  const onProgress = (progress) => {\n    setProgress(progress);\n  };\n  const onComplete = (fileUrl) => {\n    setRemoteURL(fileUrl);\n    setIsUploading(false);\n    setImageURI(null);\n  };\n\n  const onFail = (error) => {\n    setError(error);\n    setIsUploading(false);\n  };\n  const handleCloudImageUpload = async () => {\n    if (!imgURI) return;\n\n    let fileToUpload = null;\n\n    const blob = await getBlobFromUri(imgURI);\n\n    await manageFileUpload(blob, { onStart, onProgress, onComplete, onFail });\n  };\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.heading}>Attach and upload image</Text>\n      {Boolean(imgURI) && (\n        <View>\n          <Image\n            source={{ uri: imgURI }}\n            resizeMode=\"contain\"\n            style={{ width, height: width }}\n          />\n        </View>\n      )}\n\n      {!isUploading && (\n        <View style={styles.row}>\n          <AntDesign\n            name=\"addfile\"\n            size={36}\n            color={imgURI ? 'green' : 'black'}\n            onPress={handleLocalImageUpload}\n          />\n\n          {Boolean(imgURI) && (\n            <Feather\n              name=\"upload-cloud\"\n              size={36}\n              color=\"black\"\n              onPress={handleCloudImageUpload}\n            />\n          )}\n        </View>\n      )}\n\n      {isUploading && (\n        <View style={styles.uploadProgressContainer}>\n          <Text> Upload {progress} of 100% </Text>\n        </View>\n      )}\n\n      {Boolean(remoteURL) && (\n        <View style={{ paddingVertical: 20 }}>\n          <Text>\n            Image has been uploaded at\n            <Text style={{ color: 'blue' }}> {remoteURL} </Text>\n          </Text>\n        </View>\n      )}\n    </View>\n  );\n};\n\nexport default ImagePicker;\n\nconst styles = StyleSheet.create({});\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}